// 11.3 抽象类

// 11.3.1 抽象类的作用
/**
 * Java 中，一种是具体类，另一种是抽象类。
 * 具体类可以被实例化，抽象类不能被实例化。
 * 
 * 比如 给我一个饮料(抽象类)，什么饮料(具体类)?
 */


// 11.3.4 JavaScript 没有抽象类的缺点和解决方案
/**
 * 没有从语法层面提供对抽象类的支持。
 * 
 * 1、用鸭子类型来模拟接口检查，以确保子类确实重写了父类的方法。
 * 2、让父类函数抛出异常，如果没有重写，将会得到一个错误
 */

// eg
Beverage.prototype.brew = function() {
  throw new Error('自雷必须重写brew方法')
}