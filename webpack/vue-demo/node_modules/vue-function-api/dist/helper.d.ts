import { VueConstructor } from 'vue';
import { AbstractWrapper } from './wrappers';
export declare function isWrapper<T>(obj: any): obj is AbstractWrapper<T>;
export declare function ensuerCurrentVMInFn(hook: string): InstanceType<VueConstructor>;
export declare function observable<T = any>(obj: T): T;
export declare function compoundComputed(computed: {
    [key: string]: (() => any) | {
        get?: () => any;
        set?: (v: any) => void;
    };
}): import("vue/types/vue").CombinedVueInstance<import("vue").default, object, object, {
    [x: string]: any;
}, Record<never, any>>;
